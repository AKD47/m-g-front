{"version":3,"sources":["libs/_fonts.scss","base/_base.scss","base/_grid.scss","breakpoint/_breakpoint.scss","header/_navigation.scss","compass-sass-mixins/compass/css3/_shared.sass","libs/_mixins.scss","content/_top-banner.scss"],"names":[],"mappings":"AAGA,WACE,6BAA+B,AAO/B,gBANA,AAMmB,8XADyC,CACzC,AAGrB,WACE,yBAA2B,AAI3B,gBAHA,AAGmB,iLADsC,CACtC,AChBrB,UAFI,UAAW,CAEf,AAcC,KAJG,yCAA2C,AAC3C,4BAA4B,AAE5B,sBATA,AASsB,SATb,AAGT,yBADA,ADRe,mBCOf,AACmB,oBAJnB,AAGoB,SAHX,AACT,UAAU,AAKV,gBAAgB,AAChB,uBAAwB,CAK3B,AAED,2BAGQ,oBAAqB,CACxB,AAUL,kGAGQ,YAAa,CAChB,AAGL,WACI,OAAQ,CAOX,AANG,iBAII,WAHA,AAGW,WAHA,AACX,cAAc,AACd,aAAc,CAEjB,AC/CL,WACI,8BAAA,AAAsB,sBAAA,AAItB,iBADA,AACiB,kBAFjB,AACkB,kBAFlB,AACkB,mBADC,AAInB,iBAAkB,CAarB,AC6CG,0BDhEJ,WASQ,YAAa,CAUpB,CAAA,AC6CG,yBDhEJ,WAaQ,WAAY,CAMnB,CAAA,AC6CG,yBDhEJ,WAiBQ,WAAY,CAEnB,CAAA,AEXC,yCAJE,WADA,AACW,kBADO,AAElB,UAAW,CAGb,AAmDC,aCzCC,uBDP2B,ACO3B,qBAAA,ADN+B,mBAFR,ACQvB,6BAAA,ADP2B,8BAAA,ACO3B,wBAeA,ADrB+B,oBCqB/B,AAAc,oBAAd,AAAc,aAAA,AAfd,mBAAA,ADP2B,eADJ,ACQvB,uBDN+B,AAO/B,gBAHA,AAGgB,SAHP,AAET,gBAAiB,CAyClB,AAnDA,gBAeG,WAAW,AACX,cAFA,AAEc,iBAFI,CAoCnB,AAlDF,kBAwBK,WAJA,AAIW,WAJA,AAKX,6BJjCgB,AIkChB,eAPA,AAOe,kBAPG,AAIlB,kBADA,AACkB,yBAFlB,AACyB,UADd,CAkBZ,AAvCJ,wBAgCO,gEAAU,AEpCd,6BAHL,AAGiC,kCFwCxB,AE3CwB,yBFsCxB,AAKyB,WAPzB,AAEW,cAFG,AAMd,WADA,AACW,SAHX,AAES,UAJT,AAEU,kBAFQ,AEjCnB,0BFoCC,AEpCwB,QFoCf,CAKV,AAtCN,wBA0CK,UAAW,CAOZ,AAjDJ,8BA6CO,kEAAU,AEjDd,6BAHL,AAGiC,kCFiDxB,AEpDwB,UFoDd,AEhDX,0BFiDC,AEjDwB,SFiDd,CAEX,AGxDT,YACE,cAAc,AAEd,WAAW,AAEX,aAHA,AAGa,kBAHK,AAElB,UAAW,CAkBZ,AAfC,iBAOE,sCAAA,AAAqC,8BAJrC,AAIqC,YAJzB,AAGZ,OAFA,AAEO,gBALP,AAGgB,kBAHE,AAIlB,MAHA,AAGM,UAHK,CAYZ,AAdA,0CAYG,oBADA,AACiB,YADL,AACZ,iBAFA,AAEiB,UAFN,CAGZ","file":"styles.min.css","sourcesContent":["$MPR: 'MyriadProRegular';\r\n$AR: 'ArialRegular';\r\n\r\n@font-face {\r\n  font-family: 'MyriadProRegular';\r\n  src: url('../fonts/MyriadPro/MyriadProRegular.eot') format('embedded-opentype'),\r\n  url('../fonts/MyriadPro/MyriadProRegular.otf') format('otf'),\r\n  url('../fonts/MyriadPro/MyriadProRegular.woff2') format('woff2'),\r\n  url('../fonts/MyriadPro/MyriadProRegular.woff') format('woff'),\r\n  url('../fonts/MyriadPro/MyriadProRegular.ttf') format('truetype'),\r\n  url('../fonts/MyriadPro/MyriadProRegular.svg') format('svg');\r\n  font-weight: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'ArialRegular';\r\n  src: url('../fonts/Arial/ArialRegular.eot') format('embedded-opentype'),\r\n  url('../fonts/Arial/ArialRegular.woff') format('woff'),\r\n  url('../fonts/Arial/ArialRegular.ttf') format('truetype');\r\n  font-weight: normal;\r\n}","html{\r\n    width: 100%;\r\n}\r\nbody{\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-weight: inherit;\r\n    font-style: inherit;\r\n    font-family: $AR;\r\n    text-align: left;\r\n    vertical-align: baseline;\r\n    background-image: url('../img/body-bg.png');\r\n    background-repeat: no-repeat;\r\n    -webkit-background-size: cover;\r\n    background-size: cover;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n    &:hover, &:focus, &:active{\r\n        text-decoration: none;\r\n    }\r\n}\r\n\r\ninput{\r\n    outline: none;\r\n    &:hover, &:focus, &:active{\r\n        outline: none;\r\n    }\r\n}\r\n\r\ntextarea{\r\n    outline: none;\r\n    &:hover, &:focus, &:active{\r\n        outline: none;\r\n    }\r\n}\r\n\r\n%clearfix {\r\n    *zoom: 1;\r\n    &:after {\r\n        content: '';\r\n        display: table;\r\n        line-height: 0;\r\n        clear: both;\r\n    }\r\n}\r\n",".container {\r\n    box-sizing: border-box;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    position: relative;\r\n\r\n    @include breakpoint(max-width 1200px) {\r\n        width: 1200px;\r\n    }\r\n\r\n    @include breakpoint(max-width 992px) {\r\n        width: 990px;\r\n    }\r\n\r\n    @include breakpoint(max-width 770px) {\r\n        width: 760px;\r\n    }\r\n}\r\n\r\n.container {\r\n    @extend %clearfix;\r\n}\r\n","//////////////////////////////\r\n// Default Variables\r\n//////////////////////////////\r\n$Breakpoint-Settings: (\r\n  'default media': all,\r\n  'default feature': min-width,\r\n  'default pair': width,\r\n\r\n  'force all media type': false,\r\n  'to ems': false,\r\n  'transform resolutions': true,\r\n\r\n  'no queries': false,\r\n  'no query fallbacks': false,\r\n\r\n  'base font size': 16px,\r\n\r\n  'legacy syntax': false\r\n);\r\n\r\n$breakpoint: () !default;\r\n\r\n//////////////////////////////\r\n// Imports\r\n//////////////////////////////\r\n@import \"breakpoint/settings\";\r\n@import 'breakpoint/context';\r\n@import 'breakpoint/helpers';\r\n@import 'breakpoint/parsers';\r\n@import 'breakpoint/no-query';\r\n\r\n@import 'breakpoint/respond-to';\r\n\r\n@import \"breakpoint/legacy-settings\";\r\n\r\n//////////////////////////////\r\n// Breakpoint Mixin\r\n//////////////////////////////\r\n\r\n@mixin breakpoint($query, $no-query: false) {\r\n  @include legacy-settings-warning;\r\n\r\n  // Reset contexts\r\n  @include private-breakpoint-reset-contexts();\r\n\r\n  $breakpoint: breakpoint($query, false);\r\n\r\n  $query-string: map-get($breakpoint, 'query');\r\n  $query-fallback: map-get($breakpoint, 'fallback');\r\n\r\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\r\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\r\n\r\n  // Allow for an as-needed override or usage of no query fallback.\r\n  @if $no-query != false {\r\n    $query-fallback: $no-query;\r\n  }\r\n\r\n  @if $query-fallback != false {\r\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\r\n  }\r\n\r\n  // Print Out Query String\r\n  @if not breakpoint-get('no queries') {\r\n    @media #{$query-string} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\r\n\r\n    $type: type-of(breakpoint-get('no query fallbacks'));\r\n    $print: false;\r\n\r\n    @if ($type == 'bool') {\r\n      $print: true;\r\n    }\r\n    @else if ($type == 'string') {\r\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\r\n        $print: true;\r\n      }\r\n    }\r\n    @else if ($type == 'list') {\r\n      @each $wrapper in breakpoint-get('no query fallbacks') {\r\n        @if $query-fallback == $wrapper {\r\n          $print: true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Write Fallback\r\n    @if ($query-fallback != false) and ($print == true) {\r\n      $type-fallback: type-of($query-fallback);\r\n\r\n      @if ($type-fallback != 'bool') {\r\n        #{$query-fallback} & {\r\n          @content;\r\n        }\r\n      }\r\n      @else {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n\r\n  @include private-breakpoint-reset-contexts();\r\n}\r\n\r\n\r\n@mixin mq($query, $no-query: false) {\r\n  @include breakpoint($query, $no-query) {\r\n    @content;\r\n  }\r\n}\r\n",".header {\r\n\r\n  &__navigation {\r\n    position: relative;\r\n    float: left;\r\n    width: 100%;\r\n  }\r\n\r\n  &__nav {\r\n    @include display-flex(flex);\r\n    @include flex-wrap(wrap);\r\n    @include flex-direction(row);\r\n    @include justify-content(center);\r\n    position: relative;\r\n    float: left;\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    padding-top: 15px;\r\n    list-style: none;\r\n\r\n    > li {\r\n      position: relative;\r\n      float: left;\r\n      margin: 0 30px;\r\n\r\n      a {\r\n        position: relative;\r\n        float: left;\r\n        width: 100%;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        color: #fff;\r\n        font-family: $MPR;\r\n        font-size: 20px;\r\n\r\n        &:after {\r\n          display: block;\r\n          position: absolute;\r\n          content: '';\r\n          opacity: 0;\r\n          width: 1%;\r\n          left: 10%;\r\n          height: 2px;\r\n          background-color: #801e1a;\r\n          @include transition(0.4s);\r\n        }\r\n      }\r\n\r\n      a:hover {\r\n        color: #fff;\r\n\r\n        &:after {\r\n          opacity: 1;\r\n          width: 80%;\r\n          @include transition(0.4s);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","@import \"../support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value, $moz: $experimental-support-for-mozilla, $webkit: $experimental-support-for-webkit, $o: $experimental-support-for-opera, $ms: $experimental-support-for-microsoft, $khtml: $experimental-support-for-khtml, $official: true) {\n  @if $webkit and $experimental-support-for-webkit {\n    -webkit-#{$property}: $value; }\n  @if $khtml and $experimental-support-for-khtml {\n    -khtml-#{$property}: $value; }\n  @if $moz and $experimental-support-for-mozilla {\n    -moz-#{$property}: $value; }\n  @if $ms and $experimental-support-for-microsoft {\n    -ms-#{$property}: $value; }\n  @if $o and $experimental-support-for-opera {\n    -o-#{$property}: $value; }\n  @if $official {\n    #{$property}: $value; } }\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value, $moz: $experimental-support-for-mozilla, $webkit: $experimental-support-for-webkit, $o: $experimental-support-for-opera, $ms: $experimental-support-for-microsoft, $khtml: $experimental-support-for-khtml, $official: true) {\n  @if $webkit and $experimental-support-for-webkit {\n    #{$property}: -webkit-#{$value}; }\n  @if $khtml and $experimental-support-for-khtml {\n    #{$property}: -khtml-#{$value}; }\n  @if $moz and $experimental-support-for-mozilla {\n    #{$property}: -moz-#{$value}; }\n  @if $ms and $experimental-support-for-microsoft {\n    #{$property}: -ms-#{$value}; }\n  @if $o and $experimental-support-for-opera {\n    #{$property}: -o-#{$value}; }\n  @if $official {\n    #{$property}: #{$value}; } }\n","@mixin transition($t) {\r\n\t-webkit-transition: all $t linear;\r\n\t   -moz-transition: all $t linear;\r\n\t    -ms-transition: all $t linear;\r\n\t     -o-transition: all $t linear;\r\n\t        transition: all $t linear;\r\n}\r\n\r\n@mixin overflow-img() {\r\n\toverflow: hidden;\r\n\timg {\r\n\t\tmin-width: 100%;\r\n\t\theight: auto;\r\n\t\tposition: relative;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\t-webkit-transform: translate(-50%,-50%);\r\n\t\t   -moz-transform: translate(-50%,-50%);\r\n\t\t    -ms-transform: translate(-50%,-50%);\r\n\t\t     -o-transform: translate(-50%,-50%);\r\n\t\t        transform: translate(-50%,-50%);\r\n\t}\r\n}\r\n\r\n@mixin border-box{\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n\t-webkit-box-sizing: border-box;\r\n\t-ms-box-sizing: border-box;\r\n}\r\n\r\n@mixin vertical-align {\r\n\tposition: relative;\r\n\ttop: 50%;\r\n\t-webkit-transform: translateY(-50%);\r\n\t-ms-transform: translateY(-50%);\r\n\ttransform: translateY(-50%);\r\n}\r\n\r\n// Breakpoints for each query\r\n$smartphone: 480px;\r\n$tabletPortrait: 767px;\r\n$tabletLandscape: 1024px;\r\n$desktop: 1174px;\r\n$largeScreen: 1400px;\r\n\r\n@mixin respondTo($media) {\r\n\t@if $media == smartphone {\r\n\t  @media (min-width: $smartphone) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\t@else if $media == tablet {\r\n\t  @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\t@else if $media == smallScreen {\r\n\t  @media (min-width: $desktop) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\t@else if $media == desktop {\r\n\t  @media (min-width: $desktop) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n  @else if $media == largeScreen {\r\n    @media (min-width: $largeScreen) {\r\n\t\t\t@content;\r\n\t\t}\r\n  }\r\n}\r\n",".top-banner {\r\n  display: block;\r\n  position: relative;\r\n  float: left;\r\n  width: 100%;\r\n  height: 325px;\r\n\r\n  &__img {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    top: 0;\r\n    left: 0;\r\n    box-shadow: 0px -2px 51px 0px #000000;\r\n\r\n    > img, svg {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n}"],"sourceRoot":"css-source"}