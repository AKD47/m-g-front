{"version":3,"sources":["base/_base.scss","base/_grid.scss","breakpoint/_breakpoint.scss","content/_top-banner.scss","header/_head.scss"],"names":[],"mappings":"AAGA,UAFI,UAAW,CAEf,AAoBC,KAJG,sBAAsB,AACtB,qBAAqB,AACrB,oBAHA,AAGoB,yBAdpB,AAWyB,SAXhB,AAGT,oBADA,AACoB,mBAFpB,AACmB,oBAJnB,AAGoB,SAHX,AACT,UAAU,AAKV,gBAAgB,AAWhB,iBAVA,AAUiB,uBAVO,CAW3B,AAED,2BAGQ,oBAAqB,CACxB,AAUL,kGAGQ,YAAa,CAChB,AAGL,WACI,OAAQ,CAOX,AANG,iBAII,WAHA,AAGW,WAHA,AACX,cAAc,AACd,aAAc,CAEjB,ACrDL,WACI,8BAAA,AAAsB,sBAAA,AAItB,iBADA,AACiB,kBAFjB,AACkB,kBAFlB,AACkB,mBADC,AAInB,iBAAkB,CAarB,AC6CG,0BDhEJ,WASQ,YAAa,CAUpB,CAAA,AC6CG,yBDhEJ,WAaQ,WAAY,CAMnB,CAAA,AC6CG,yBDhEJ,WAiBQ,WAAY,CAEnB,CAAA,AEnBD,oBCEE,WADA,AACW,kBADO,AAElB,UAAW,CDHb,AAsBC,YArBC,cAAc,AAId,YAAa,CAiBd,AAfC,iBAOE,sCAAA,AAAqC,8BAJrC,AAIqC,YAJzB,AAGZ,OAFA,AAEO,gBALP,AAGgB,kBAHE,AAIlB,MAHA,AAGM,UAHK,CAYZ,AAdA,0CAYG,oBADA,AACiB,YADL,AACZ,iBAFA,AAEiB,UAFN,CAGZ","file":"styles.min.css","sourcesContent":["html{\r\n    width: 100%;\r\n}\r\nbody{\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-weight: inherit;\r\n    font-style: inherit;\r\n    font-family: inherit;\r\n    text-align: left;\r\n    vertical-align: baseline;\r\n    //font-family: 'Open Sans', sans-serif;\r\n    //font-family: 'PT Sans', sans-serif;\r\n    //font-family: 'Roboto', sans-serif;\r\n    //font-family: 'Source Sans Pro', sans-serif;\r\n    //font-family: 'Lato', sans-serif;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    -o-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n    &:hover, &:focus, &:active{\r\n        text-decoration: none;\r\n    }\r\n}\r\n\r\ninput{\r\n    outline: none;\r\n    &:hover, &:focus, &:active{\r\n        outline: none;\r\n    }\r\n}\r\n\r\ntextarea{\r\n    outline: none;\r\n    &:hover, &:focus, &:active{\r\n        outline: none;\r\n    }\r\n}\r\n\r\n%clearfix {\r\n    *zoom: 1;\r\n    &:after {\r\n        content: '';\r\n        display: table;\r\n        line-height: 0;\r\n        clear: both;\r\n    }\r\n}\r\n",".container {\r\n    box-sizing: border-box;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    position: relative;\r\n\r\n    @include breakpoint(max-width 1200px) {\r\n        width: 1200px;\r\n    }\r\n\r\n    @include breakpoint(max-width 992px) {\r\n        width: 990px;\r\n    }\r\n\r\n    @include breakpoint(max-width 770px) {\r\n        width: 760px;\r\n    }\r\n}\r\n\r\n.container {\r\n    @extend %clearfix;\r\n}\r\n","//////////////////////////////\r\n// Default Variables\r\n//////////////////////////////\r\n$Breakpoint-Settings: (\r\n  'default media': all,\r\n  'default feature': min-width,\r\n  'default pair': width,\r\n\r\n  'force all media type': false,\r\n  'to ems': false,\r\n  'transform resolutions': true,\r\n\r\n  'no queries': false,\r\n  'no query fallbacks': false,\r\n\r\n  'base font size': 16px,\r\n\r\n  'legacy syntax': false\r\n);\r\n\r\n$breakpoint: () !default;\r\n\r\n//////////////////////////////\r\n// Imports\r\n//////////////////////////////\r\n@import \"breakpoint/settings\";\r\n@import 'breakpoint/context';\r\n@import 'breakpoint/helpers';\r\n@import 'breakpoint/parsers';\r\n@import 'breakpoint/no-query';\r\n\r\n@import 'breakpoint/respond-to';\r\n\r\n@import \"breakpoint/legacy-settings\";\r\n\r\n//////////////////////////////\r\n// Breakpoint Mixin\r\n//////////////////////////////\r\n\r\n@mixin breakpoint($query, $no-query: false) {\r\n  @include legacy-settings-warning;\r\n\r\n  // Reset contexts\r\n  @include private-breakpoint-reset-contexts();\r\n\r\n  $breakpoint: breakpoint($query, false);\r\n\r\n  $query-string: map-get($breakpoint, 'query');\r\n  $query-fallback: map-get($breakpoint, 'fallback');\r\n\r\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\r\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\r\n\r\n  // Allow for an as-needed override or usage of no query fallback.\r\n  @if $no-query != false {\r\n    $query-fallback: $no-query;\r\n  }\r\n\r\n  @if $query-fallback != false {\r\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\r\n  }\r\n\r\n  // Print Out Query String\r\n  @if not breakpoint-get('no queries') {\r\n    @media #{$query-string} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\r\n\r\n    $type: type-of(breakpoint-get('no query fallbacks'));\r\n    $print: false;\r\n\r\n    @if ($type == 'bool') {\r\n      $print: true;\r\n    }\r\n    @else if ($type == 'string') {\r\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\r\n        $print: true;\r\n      }\r\n    }\r\n    @else if ($type == 'list') {\r\n      @each $wrapper in breakpoint-get('no query fallbacks') {\r\n        @if $query-fallback == $wrapper {\r\n          $print: true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Write Fallback\r\n    @if ($query-fallback != false) and ($print == true) {\r\n      $type-fallback: type-of($query-fallback);\r\n\r\n      @if ($type-fallback != 'bool') {\r\n        #{$query-fallback} & {\r\n          @content;\r\n        }\r\n      }\r\n      @else {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n\r\n  @include private-breakpoint-reset-contexts();\r\n}\r\n\r\n\r\n@mixin mq($query, $no-query: false) {\r\n  @include breakpoint($query, $no-query) {\r\n    @content;\r\n  }\r\n}\r\n",".top-banner {\r\n  display: block;\r\n  position: relative;\r\n  float: left;\r\n  width: 100%;\r\n  height: 325px;\r\n\r\n  &__img {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    top: 0;\r\n    left: 0;\r\n    box-shadow: 0px -2px 51px 0px #000000;\r\n\r\n    > img, svg {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n}",".header {\r\n  position: relative;\r\n  float: left;\r\n  width: 100%;\r\n}"],"sourceRoot":"css-source"}